{"version":3,"sources":["Bold.js","Italic.js","UserInput.js","App.js","serviceWorker.js","index.js"],"names":["Bold","props","aria-hidden","focusable","data-prefix","data-icon","className","role","xmlns","viewBox","fill","d","data-testid","Italic","UserInput","useState","text","setText","bold","italic","options","setOptions","textInputRef","useRef","handleOptionChange","option","prevText","prevOptions","current","focus","boldOptionColor","italicOptionColor","rows","value","onChange","event","target","placeholder","autoFocus","ref","onClick","markdownText","sendMarkdown","App","markdown","setMarkdown","source","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iMAaeA,MARf,SAAcC,GACV,OACI,yBAAKC,cAAY,OAAOC,UAAU,QAAQC,cAAY,MAAMC,YAAU,OAAOC,UAAU,iDAAiDC,KAAK,MAAMC,MAAM,6BAA6BC,QAAQ,eAC1L,0BAAMC,KAAMT,EAAMS,KAAMC,EAAE,kUAAkUC,cAAY,eCMrWC,MATf,SAAgBZ,GAEZ,OACI,yBAAKC,cAAY,OAAOC,UAAU,QAAQC,cAAY,MAAMC,YAAU,SAASC,UAAU,mDAAmDC,KAAK,MAAMC,MAAM,6BAA6BC,QAAQ,eAC9L,0BAAMC,KAAMT,EAAMS,KAAMC,EAAE,mNAAmNC,cAAY,iBCsGtPE,MA1Gf,SAAmBb,GAAO,MAKEc,mBAAS,IALX,mBAKfC,EALe,KAKTC,EALS,OAMQF,mBAAS,CACnCG,MAAO,EACPC,QAAS,IARS,mBAMfC,EANe,KAMNC,EANM,KAchBC,EAAeC,iBAAO,MAMtBC,EAAqB,SAAAC,GAET,SAAXA,GAMCR,GAAQ,SAAAS,GAAQ,OAAIA,EAAW,QAC/BL,GAAW,SAAAM,GAAW,kCACfA,GADe,IAElBT,MAAQS,EAAW,WAEP,WAAXF,IAKLR,GAAQ,SAAAS,GAAQ,OAAIA,EAAW,OAC/BL,GAAW,SAAAM,GAAW,kCACfA,GADe,IAElBR,QAAUQ,EAAW,aAQ7BL,EAAaM,QAAQC,SAQnBC,EAAkBV,EAAO,KAFH,UACD,UAErBW,EAAoBX,EAAO,OAHL,UACD,UAI3B,OACI,yBAAKd,UAAU,mBAMX,8BAAUA,UAAU,aAAa0B,KAAM,EAAGC,MAAOjB,EAAMkB,SAAU,SAAAC,GAAK,OAAIlB,EAAQkB,EAAMC,OAAOH,QAAQI,YAAY,yBAAyBC,WAAS,EAACC,IAAKjB,EAAcV,cAAY,eACrL,yBAAKN,UAAU,YACf,6BACI,yBAAKA,UAAU,SAASkC,QAAS,kBAAMhB,EAAmB,SAASZ,cAAY,eAC3E,kBAAC,EAAD,CAAMF,KAAMoB,KAEhB,yBAAKxB,UAAU,SAASkC,QAAS,kBAAMhB,EAAmB,WAAWZ,cAAY,iBAC7E,kBAAC,EAAD,CAAQF,KAAMqB,KAElB,4BAAQzB,UAAU,cAAckC,QAAS,WAMrC,IAAIC,EAAezB,EAChBI,EAAO,OAENqB,GAAgB,KAChBjB,EAAmB,SAEpBJ,EAAO,SAENqB,GAAgB,IAChBjB,EAAmB,WAMvBvB,EAAMyC,aAAaD,GACnBxB,EAAQ,MAtBZ,WC3DD0B,MAhBf,WAAe,MAEmB5B,mBAAS,IAF5B,mBAEN6B,EAFM,KAEIC,EAFJ,KAQb,OACE,yBAAKvC,UAAU,aACb,kBAAC,IAAD,CAAewC,OAAQF,EAAUtC,UAAU,uBAC3C,kBAAC,EAAD,CAAWoC,aAAcG,MCLXE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.615129a7.chunk.js","sourcesContent":["import React from 'react';\n\n/* \n    Component for 'bold' icon\n*/\nfunction Bold(props) {\n    return (\n        <svg aria-hidden=\"true\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"bold\" className=\"svg-inline--fa fa-bold fa-w-12 icon-responsive\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\">\n            <path fill={props.fill} d=\"M333.49 238a122 122 0 0 0 27-65.21C367.87 96.49 308 32 233.42 32H34a16 16 0 0 0-16 16v48a16 16 0 0 0 16 16h31.87v288H34a16 16 0 0 0-16 16v48a16 16 0 0 0 16 16h209.32c70.8 0 134.14-51.75 141-122.4 4.74-48.45-16.39-92.06-50.83-119.6zM145.66 112h87.76a48 48 0 0 1 0 96h-87.76zm87.76 288h-87.76V288h87.76a56 56 0 0 1 0 112z\" data-testid=\"bold-svg\"></path>\n        </svg>\n    )\n}\n\nexport default Bold;","import React from 'react';\n\n/* \n    Component for 'italic' icon\n*/\nfunction Italic(props)\n{\n    return (\n        <svg aria-hidden=\"true\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"italic\" className=\"svg-inline--fa fa-italic fa-w-10 icon-responsive\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 320 512\">\n            <path fill={props.fill} d=\"M320 48v32a16 16 0 0 1-16 16h-62.76l-80 320H208a16 16 0 0 1 16 16v32a16 16 0 0 1-16 16H16a16 16 0 0 1-16-16v-32a16 16 0 0 1 16-16h62.76l80-320H112a16 16 0 0 1-16-16V48a16 16 0 0 1 16-16h192a16 16 0 0 1 16 16z\" data-testid=\"italic-svg\"></path>\n        </svg>\n    )\n}\n\nexport default Italic;","import React, {useState, useRef} from 'react';\nimport Bold from './Bold';\nimport Italic from './Italic';\n\n/* Component to handle user input (plain text)*/\nfunction UserInput(props) {\n    /* \n        Internal state to keep track of text entered by user\n        as well as whether any of options (bold,italic is selected) \n    */\n    const [text, setText] = useState(\"\");\n    const [options, setOptions] = useState({\n        bold : false,\n        italic : false\n    });\n\n    /* \n        Reference to user input element, used to focus input element\n    */\n    const textInputRef = useRef(null)\n\n    /* \n        Function to handle change in options, called when either\n        bold or italic is selected/de-selected\n    */\n    const handleOptionChange = option => {\n        // check which option was changed\n        if(option === \"bold\")\n        {\n            /* \n            add '**' to make text bold and update internal state\n            of options to reflect changes\n            */\n            setText(prevText => prevText + \"**\");\n            setOptions(prevOptions => ({\n                ...prevOptions,\n                bold : !prevOptions[\"bold\"]\n            }));\n        }else if(option === \"italic\")\n        {\n            /*\n                Add single asterik for italics\n            */\n            setText(prevText => prevText + \"*\");\n            setOptions(prevOptions => ({\n                ...prevOptions,\n                italic : !prevOptions[\"italic\"]\n            }));\n        }\n        \n        /* \n            When any option is clicked input element loses focus,\n            refocus input element for better user experience\n        */\n        textInputRef.current.focus();\n    }\n\n    /* \n        Constants to decide color of bold and italic option\n    */\n    const optionSelectedColor = \"#1a73e8\";\n    const optionDefaultColor = \"#000000\";\n    const boldOptionColor = options[\"bold\"] ? optionSelectedColor : optionDefaultColor;\n    const italicOptionColor = options[\"italic\"] ? optionSelectedColor : optionDefaultColor;\n    \n    return (\n        <div className=\"input-container\">\n            {/* textarea : for user input\n                divider : to add a divider line\n                Bold, Italic : components for bold and italic button\n                send-button : to send markdown text\n            */}\n            <textarea className=\"text-input\" rows={4} value={text} onChange={event => setText(event.target.value)} placeholder=\"Please enter text here\" autoFocus ref={textInputRef} data-testid=\"user-input\" />\n            <div className=\"divider\"/>\n            <div>\n                <div className=\"option\" onClick={() => handleOptionChange(\"bold\")} data-testid=\"bold-option\">\n                    <Bold fill={boldOptionColor}/>\n                </div>\n                <div className=\"option\" onClick={() => handleOptionChange(\"italic\")} data-testid=\"italic-option\">\n                    <Italic fill={italicOptionColor} />\n                </div>\n                <button className=\"send-button\" onClick={() => {\n                    {/* \n                        Check if bold or italic is selected, add\n                        '**' or '*' respectively to make markdown valid\n                        and de-select the option\n                    */}\n                    let markdownText = text;\n                    if(options[\"bold\"])\n                    {\n                        markdownText += \"**\";\n                        handleOptionChange(\"bold\");\n                    }\n                    if(options[\"italic\"])\n                    {\n                        markdownText += \"*\";\n                        handleOptionChange(\"italic\")\n                    }\n                    {/* \n                        update state of parent component to display\n                        markdown in renderer and clear text input\n                    */}\n                    props.sendMarkdown(markdownText);\n                    setText(\"\");\n                    }\n                    }>SEND</button>\n            </div>\n        </div>\n    )\n}\n\nexport default UserInput;","import React, {useState} from 'react';\nimport './App.css';\nimport ReactMarkdown from 'react-markdown';\nimport UserInput from './UserInput';\n\n/* Markdown Component */\nfunction App() {\n  /* Maintain internal state for rendered markdown text*/\n  const [markdown, setMarkdown] = useState(\"\");\n  \n  /* \n    ReactMarkdown : Component to render markdown text\n    UserInput : Component to handle user input (plain text)\n  */\n  return (\n    <div className=\"container\">\n      <ReactMarkdown source={markdown} className=\"markdown-container\"/>\n      <UserInput sendMarkdown={setMarkdown}/>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}